(let
    ((fix
      (check
       (lam
        (U 0)
        (A
         (lam
          (Pi (Later (_ A)) (_ A))
          (f (ap f (dfix A (x (ap f x))))))))
       (Pi (U 0) (A (Pi (Pi (Later (_ A)) (_ A)) (_ A))))))
     (fix1
      (check
       (lam
        (U 1)
        (A
         (lam
          (Pi (Later (_ A)) (_ A))
          (f (ap f (dfix A (x (ap f x))))))))
       (Pi (U 1) (A (Pi (Pi (Later (_ A)) (_ A)) (_ A))))))
     (StreamF
      (check
       (lam
        (Later (_ (Pi Nat (_ (U 0)))))
        (S
         (lam Nat (_ (Sig Nat (_ (Later (t (ap (prev S t) 0)))))))))
       (Pi (Later (_ (Pi Nat (_ (U 0))))) (_ (Pi Nat (_ (U 0)))))))
     (Stream
      (check
       (ap fix1 (Pi Nat (_ (U 0))) StreamF)
       (Pi Nat (_ (U 0)))))
     (UnfoldedStream
      (check
       (lam
        Nat
        (n
         (Sig
          Nat
          (_
           (Later
            (t
             (ap (prev (dfix (Pi Nat (_ (U 0))) (x (ap StreamF x))) t) n)))))))
       (Pi Nat (_ (U 0)))))
     (into
      (check
       (lam
        (Later (_ (ap Stream 0)))
        (s
         (next (t (fold 0 Nat (x (ap StreamF x)) 0 (prev s t) t)))))
       (Pi (Later (_ (ap Stream 0))) (_ (ap UnfoldedStream 0))))))
     ;; (into
     ;;  (check
     ;;   (lam
     ;;    (U 0)
     ;;    (A
     ;;     (lam
     ;;      (Later (_ (ap Stream A)))
     ;;      (x
     ;;       (next
     ;;        (t
     ;;         (let ((str (prev x t)))
     ;;           ?)))))))
     ;;   (Pi
     ;;    (U 0)
     ;;    (A (Pi (Later (_ (ap Stream A))) (_ (ap StreamTick A))))))))
  zero)
Nat
