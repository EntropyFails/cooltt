let out : (A : [box U<0>]) -> [box [unlock A]] -> [unlock A] =
  fun A x -> [unlock x]

let duplicate : (A : [box U<0>]) -> [box [unlock A]] -> [box [box [unlock A]]] =
 fun A x -> [lock [lock [unlock x]]]

let k : (A : [box U<0>]) (B : [box U<0>]) -> [box [unlock A] -> [unlock B]] -> [box [unlock A]] -> [box [unlock B]] =
 fun A B f a -> [lock [unlock f] [unlock a]]

let simple-rule : (A : [box U<0>]) (t : [box [unlock A]]) -> Id [box [unlock A]] (out [lock [box [unlock A]]] (duplicate A t)) t =
  fun A t -> refl t

normalize def k
