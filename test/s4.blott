let out : (A : Box U<0>) -> (Box (open A)) -> (open A) =
  fun A -> fun x -> open x

let duplicate : (A : Box U<0>) -> (Box (open A)) -> (Box (Box (open A))) =
 fun A -> fun x -> shut (shut (open x))

let k : (A : Box U<0>) -> (B : Box U<0>) -> (Box ((open A) -> (open B))) -> (Box (open A)) -> (Box (open B)) =
 fun A -> fun B -> fun f -> fun a -> shut ((open f) (open a))

let simple-rule : (A : Box U<0>) -> (t : Box (open A)) -> (Id (Box (open A)) (out (shut (Box (open A))) (duplicate A t)) t) =
  fun A -> fun t -> refl t

normalize def k
