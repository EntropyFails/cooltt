let test : Id Nat 0 0 = refl 0

let subst : (A : Nat -> U<0>) -> (n : Nat) -> (m : Nat) -> (Id Nat n m) -> (A n) -> (A m) =
  fun A -> fun n -> fun m -> fun prf ->
  match prf at x y prf -> (A x) -> (A y) with
  | refl _ -> fun x -> x

let uhoh : (A : U<0>) -> Nat -> U<0> =
  fun A -> fun n ->
  rec n at _ -> U<0> with
  | zero -> Id Nat 0 0
  | suc _, _ -> A

let absurd : (A : U<0>) -> (Id Nat 0 1) -> A =
 fun A -> fun prf ->
 subst (uhoh A) 0 1 prf (refl 0)
