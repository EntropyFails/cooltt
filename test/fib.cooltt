; Not really a particularly interesting program, but good for computing stuff.

let plus : nat -> nat -> nat =
  fun m n ->
  rec n at x -> nat with
  | zero -> m
  | suc (_ -> p) -> suc p

let fib : nat -> nat =
  fun n ->
  let worker : nat * nat =
    rec n at _ -> nat * nat with
    | zero -> (1, 0)
    | suc (_ -> p) -> (plus (fst p) (snd p), fst p)
  in
  snd worker

normalize fib 25 at nat
