def + : nat -> nat -> nat = {
  \m n =>
  rec n at x => nat with [
  | zero => m
  | suc (_ => p) => suc p
  ]
}

def fib : nat -> nat = {
  \n=>
  let worker : nat * nat =
    rec n at _ => nat * nat with [
    | zero => [1, 0]
    | suc (_ => p) => [+ {fst p} {snd p}, fst p]
    ]
  in
  snd worker
}

def foo : (p : Id nat {fib 3} 1) -> nat =
  \x =>
  unfold fib in ?


normalize foo