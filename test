;; normalize an identity function for nat x nat x nat
;; (lam (x x))
;; (Pi
;;  (Sig Nat (_ (Sig Nat (_ Nat))))
;;  (_ (Sig Nat (_ (Sig Nat (_ Nat))))))
;;
;; expected result:
;;    (lam (x (pair (fst (fst x)) (pair (fst (snd x)) (snd (snd x))))))

;; normalize an identity function for (nat -> nat) -> nat
;; (lam (x x))
;; (Pi
;;  (Pi (Pi Nat (_ Nat)) (_ Nat))
;;  (_
;;   (Pi (Pi Nat (_ Nat)) (_ Nat))))

;; expected result:
;;    (lam (x1 (lam (x2 (ap x1 (lam (x3 (ap x2 x3))))))))

;; Compute the 25th fibonacci number.
;; (let (plus (lam (a (lam (b (nrec (_ Nat) a (a b (suc b)) b))))))
;;   (let (fib
;;         (lam
;;          (n (nrec
;;              (_ (Sig Nat (_ Nat)))
;;              (pair 1 0)
;;              (_ p (pair (ap plus (fst p) (snd p)) (fst p)))
;;              n))))
;;     (snd (ap fib 25))))
;; Nat
;;
;; expected result:
;;    75025

;; Test computing with universes
;; (ap (lam (x (Pi x (_ (U 0))))) (U 2)) (U 3)
;;
;; expected result:
;;    Pi (U 2) (_ (U 0))

;; (shut (open (shut 1))) (Box Nat)

(prev (dfix (U 0) (x (Later (y (prev x y))))) *) (U 0)
