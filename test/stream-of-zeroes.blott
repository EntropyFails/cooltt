let fix : (A : U<0>) -> ((Later -> A) -> A) -> A =
  fun (A : U<0>) ->
  fun (f : (Later -> A) -> A) ->
  f (dfix (x : Later -> A) -> f x).

let fix1 : (A : U<1>) -> ((Later -> A) -> A) -> A =
  fun (A : U<1>) ->
  fun (f : (Later -> A) -> A) ->
  f (dfix (x : Later -> A) -> f x).

;      (StreamF
;       (check
;        (lam
;         (Later (_ (Pi Nat (_ (U 0)))))
;         (S
;          (lam Nat (_ (Sig Nat (_ (Later (t (ap (prev S t) 0)))))))))
;        (Pi (Later (_ (Pi Nat (_ (U 0))))) (_ (Pi Nat (_ (U 0)))))))
;      (Stream
;       (check
;        (ap fix1 (Pi Nat (_ (U 0))) StreamF)
;        (Pi Nat (_ (U 0)))))
;      (UnfoldedStream
;       (check
;        (lam
;         Nat
;         (n
;          (Later
;           (t
;            (ap (prev (dfix (Pi Nat (_ (U 0))) (x (ap StreamF x))) t) n)))))
;        (Pi Nat (_ (U 0)))))
;      (into
;       (check
;        (lam
;         (Later (_ (ap Stream 0)))
;         (s
;          (next (t (fold 0 Nat (x (ap StreamF x)) 0 (prev s t) t)))))
;        (Pi (Later (_ (ap Stream 0))) (_ (ap UnfoldedStream 0)))))
;      (out
;       (check
;        (lam
;         (ap UnfoldedStream 0)
;         (s
;          (next (t (unfold 0 Nat (x (ap StreamF x)) 0 (prev s t) t)))))
;        (Pi (ap UnfoldedStream 0) (_ (Later (_ (ap Stream 0)))))))
;      (cons
;       (check
;        (lam Nat (n (lam (Later (_ (ap Stream 0))) (s (pair n (ap into s))))))
;        (Pi Nat (_ (Pi (Later (_ (ap Stream 0))) (_ (ap Stream 0)))))))
;      (head
;       (check
;        (lam (ap Stream 0) (s (fst s)))
;        (Pi (ap Stream 0) (_ Nat))))
;      (allzeroes
;       (ap fix (ap Stream 0) (lam (Later (_ (ap Stream 0))) (s (ap cons 0 s))))))
;   allzeroes)
; (let
;     ((fix1
;       (check
;        (lam
;         (U 1)
;         (A
;          (lam
;           (Pi (Later (_ A)) (_ A))
;           (f (ap f (dfix A (x (ap f x))))))))
;        (Pi (U 1) (A (Pi (Pi (Later (_ A)) (_ A)) (_ A))))))
;      (StreamF
;       (check
;        (lam
;         (Later (_ (Pi Nat (_ (U 0)))))
;         (S
;          (lam Nat (_ (Sig Nat (_ (Later (t (ap (prev S t) 0)))))))))
;        (Pi (Later (_ (Pi Nat (_ (U 0))))) (_ (Pi Nat (_ (U 0)))))))
;      (Stream
;       (check
;        (ap fix1 (Pi Nat (_ (U 0))) StreamF)
;        (Pi Nat (_ (U 0))))))
;   (ap Stream 0))
