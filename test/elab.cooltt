def foo : (x : nat) -> (y : nat) * Id nat x y = {
  \x=>
  [x, ?hole1]
}

def bar : (x : nat) -> nat = {
  \x=>
  fst {foo x}
}

def boo : nat = {
  zero
}

normalize boo
normalize foo
normalize bar


def sigma_eta : {
  (p : (x : nat) * nat) 
  -> Id {(x : nat) * nat} p [fst p, snd p] 
} = {
  \p=>
  refl
}

normalize sigma_eta