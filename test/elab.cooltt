def foo : (x : nat) -> (y : nat) * Id nat x y =
  fun x -> 
  (x, ?hole1)

def bar : (x : nat) -> nat = 
  fun x ->
    fst (foo x)

normalize def foo
normalize def bar


def sigma_eta : (p : ((x : nat) * nat)) -> Id ((x : nat) * nat) p (fst p, snd p) = 
  fun p ->
    refl

normalize def sigma_eta