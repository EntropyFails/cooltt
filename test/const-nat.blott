let con :
  nat -> [box nat] =
  fun n ->
  rec n at _ -> [box nat] with
  | zero -> [lock zero]
  | suc _, p -> [lock suc [unlock p]]

normalize con 50 at [box nat]

let subst : (A : nat -> U<0>) (n : nat) (m : nat) -> (Id nat n m) -> (A n) -> (A m) =
  fun A n m prf ->
  match prf at x y prf -> (A x) -> (A y) with
  | refl _ -> fun x -> x

let con_eq :
  (n : [box nat]) -> Id nat [unlock n] [unlock con [unlock n]] =
  fun n ->
  rec [unlock n] at m -> Id nat m [unlock con m] with
  | zero -> refl zero
  | suc m, p ->
    subst (fun x -> Id nat (suc m) (suc x)) m [unlock con m] p (refl (suc m))
